////////////////////////// Gradle Core Declarations ///////////////////////

buildscript {
}

// Declare the plugins to be added to Gradle
plugins {
    // Gradle Java core plugin. Does not need to be explicitly declared.
    // Adds Java compilation, testing and bundling capabilities to a project.
    // https://docs.gradle.org/current/userguide/java_plugin.html#java_plugin
    id 'java'
    // JetBrains IDE plugin for building IDEA projects with Gradle
    // Must be explicitly declared.
    // https://github.com/JetBrains/gradle-intellij-plugin/blob/master/README.md
  id "org.jetbrains.intellij" version "0.3.12"
}
apply plugin: 'java'
apply plugin: 'org.jetbrains.intellij'

// Declare public binary repositories to download and consume open source dependencies
repositories {
    mavenCentral()
}

// Declare dependencies on modules hosted in repositories, files and other Gradle projects
// https://docs.gradle.org/current/userguide/dependency_types.html#dependency_types
dependencies {
    // dependency required to compile the test source of the project
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// Set Standard Gradle project properties
//  https://docs.gradle.org/current/userguide/writing_build_scripts.html#sec:standard_project_properties
project.group 'org.jetbrains.sdk.gradle_demo'
project.version '0.1.0'
// Set to the default buildDir directory for documentation
project.buildDir = file("${project.projectDir}/build")



////////////////////////// Gradle Core Java Declarations ///////////////////////

// Custom project layout for this plugin (just for documentation, this layout is actually default.)
// https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_project_layout
// Notes on syntax:
// srcDir 'some/dir/path' is additive to existing source set
// srcDirs = ['some/dir/path'] replaces default source set with ONLY this set
sourceSets {
    main {
        java {
            srcDir 'src/main/java/'
        }
        resources {
            srcDir 'src/main/resources/'
        }
    }
    test {
        java {
            srcDir 'src/test/java'
        }
        resources {
            srcDir 'src/test/resources'
        }
    }
}


// Build the java docs into the correct output directory
// https://docs.gradle.org/current/dsl/org.gradle.api.tasks.javadoc.Javadoc.html
task makeJavaDoc(type: Javadoc) {
    source = sourceSets.main.java.srcDirs
    classpath = sourceSets.main.compileClasspath
    // Non-default path
    destinationDir = project.file('docs/javadoc')
}


////////////////////////// IDEA Plugin for JetBrains IDEs /////////////////////
// https://github.com/JetBrains/gradle-intellij-plugin/blob/master/README.md

intellij {
    // Name for the plugin jar file (same as project name in Devkit)
    pluginName 'gradle_plugin_demo'

    // The version of the IDEA distribution that should be used as a dependency.
    // This is the version of a JetBrains IDE to be used for test/debug of this plugin.
    // If neither 'version' nor 'localPath' is specified, default is downloading the latest eap snapshot.
    // For a full list of IntelliJ IDEA releases please see https://www.jetbrains.com/intellij-repository/releases
    // version '2018.3'
    
    // The path to locally installed IDEA distribution that should be used as a dependency. 
    // note the IntelliJ version on this path must match format specified in patchPluginXML.sinceBuild
    // Commented out because intellij.version and intellij.localPath should not be specified at the same time.
    // localPath = '/Applications/IntelliJ.app'

    // The type of JetBrains distribution. IntelliJ Community Edition is the default.
    type 'IC'
    
    // The list of bundled IDEA plugins and plugins from the IDEA repository
    // on which this plugin depends. Same function as <depends> tag in plugin.xml
    // plugins 'Groovy'

    // Patch plugin.xml with "since" and "until" build values from 
    // patchPluginXml.sinceBuild and patchPluginXml.untilBuild (or their default values if none set).
    updateSinceUntilBuild = 'true'

    // The user-defined value from patchPluginXml.sinceBuild 
    // (or its default value) will be used as a "since" value,
    // and if set to true the same value will be set for the "until" value.
    sameSinceUntilBuild = 'false'
    
    // Instrument Java classes with nullability assertions?
    // This is the default value, defined for documentation purposes
    instrumentCode = 'true'

    // Do not download sources while initializing Gradle build
    downloadSources = 'false'

    // Define custom sandbox name - defining the default name for documentation purposes
    sandboxDirectory = file("${project.buildDir}/sandbox")
    
    // The absolute path to the locally installed JetBrains IDE.
    // The default empty path means use the same IDE for compiling and running/debugging
    alternativeIdePath = ''

    // The absolute path to the local directory that should be used for storing IDEA distributions.
    // Default (empty path) means the Gradle cache directory will be used.
    ideaDependencyCachePath = ''

}

// Set runIde variables
// There is no way to explicitly declare using default JetBrains Java version.
// Just leave it out for the default.
// runIde.jbreVersion = ''

// Path to IDEA distribution
// How does this relate to intellij.localPath, intellij.alternativeIdePath?
// ideaDirectory = ''

// Path to the sandbox config directory  
// This is the default value, defined for documentation purposes
runIde.configDirectory = file("${intellij.sandboxDirectory}/config")

// Path to the sandbox plugins directory  
// This is the default value, defined for documentation purposes
runIde.pluginsDirectory = file("${intellij.sandboxDirectory}/plugins")

// Path to the sandbox system directory  
// This is the default value, defined for documentation purposes
runIde.systemDirectory = file("${intellij.sandboxDirectory}/system")


// Patch the plugin.xml file with the following values
patchPluginXml {
    version = project.version               // <version> tag value  
    sinceBuild = '131'                      // <idea-version> tag since-build attribute 

    // <idea-version> tag until-build attribute - Not Inclusive!
    untilBuild = ''                         // substitutes as an open value

    // Replaces <description> tag contents
    pluginDescription = '<![CDATA[Demonstrates using the Gradle workflow to develop plugins for JetBrains IDEs<br>Adds <em>Greeting</em> to the main menu.<br>Pops a simple <b>Hello</b> dialog]]>'

    // Replaces <change-notes> tag value
    changeNotes = '<![CDATA[<b>0.1.0</b> Document build.gradle file<br><b>0.0.1</b> Initial release.]]>'

    // The list of plugin.xml files to patch (in this case just 1)
    // Note that full path is required for each plugin.xml file
    // This is the default value, defined for documentation purposes
    pluginXmlFiles = ["${sourceSets.main.resources.asPath}"]

    // the directory to store patched xml files
    // This is the default value, defined for documentation purposes
    destinationDir = file("${project.buildDir}/patchedPluginXmlFiles")
}


