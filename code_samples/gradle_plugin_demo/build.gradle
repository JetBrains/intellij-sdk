////////////////////////// Gradle Core Declarations ///////////////////////

// Declare the plugins to be added to Gradle
plugins {
  // Gradle Java core plugin. Does not need to be explicitly declared; just
  // shown for documentation. Adds Java compilation, testing and bundling 
  // capabilities to a project.
  id 'java'
  // JetBrains IDE plugin for building IDEA projects with Gradle
  // Must be explicitly declared.
  id "org.jetbrains.intellij" version "0.3.12"
}
apply plugin: 'java'
apply plugin: 'org.jetbrains.intellij'

// Declare public binary repositories to download and consume open source dependencies
repositories {
  mavenCentral()
}

// Declare dependencies on modules hosted in repositories, files and other Gradle projects
dependencies {
  // dependency required to compile the test source of the project
  testCompile group: 'junit', name: 'junit', version: '4.12'
}

// Set the project build directory.
// This is the default value, defined for documentation purposes
project.buildDir = file("${project.projectDir}/build")

////////////////////////// Gradle Core Java Declarations ///////////////////////

// Specify the version of the Java programming language be used to compile .java files
sourceCompatibility= 1.8

// Define a custom project layout for this plugin 
// This is the default value, defined for documentation purposes
// Notes on syntax:
//   srcDir 'some/dir/path' is additive to existing source set
//   srcDirs = ['some/dir/path'] replaces default source set with ONLY this set
sourceSets {
  main {
    java {
      srcDir 'src/main/java/'
    }
    resources {
      srcDir 'src/main/resources/'
    }
  }
  test {
    java {
      srcDir 'src/test/java'
    }
    resources {
      srcDir 'src/test/resources'
    }
  }
}


////////////////////////// IDEA Gradle Plugin for JetBrains IDEs /////////////////////
// https://github.com/JetBrains/gradle-intellij-plugin/blob/master/README.md

intellij {
  // Name for the plugin jar file (same as project name in Devkit)
  pluginName 'gradle_plugin_demo'

  // Specify the version of IDEA against which your plugin will be built
  // If neither intellij.version nor intellij.localPath is specified, default is downloading the latest EAP snapshot.
  // If this version does not exist on your machine Gradle will download it.
  // Note the IntelliJ version must match the version specified in patchPluginXML.sinceBuild IF intellij.updateSinceUntilBuild is true.
  // For a full list of IntelliJ IDEA releases please see https://www.jetbrains.com/intellij-repository/releases
  version '183.4886.37'

  // The path to locally installed IDEA version against which your plugin will be built. 
  // Commented out because intellij.version is already specified.
  // Note the IntelliJ version on this path must match the version specified in patchPluginXML.sinceBuild
  // IF intellij.updateSinceUntilBuild is true.
  // localPath = '/Applications/IntelliJCE2018-3.app'

  // The type of JetBrains distribution. IntelliJ Community Edition is the default.
  type 'IC'

  // The list of bundled IDEA plugins and plugins from the IDEA repository
  // on which this plugin depends. Same function as <depends> tag in plugin.xml
  // This is just an example, not really required for this plugin.
  plugins 'org.intellij.plugins.markdown:183.4588.3'

  // Patch plugin.xml with "since" and "until" build values from 
  // patchPluginXml.sinceBuild and patchPluginXml.untilBuild.
  // This is the default value, defined for documentation purposes
  updateSinceUntilBuild = 'true'

  // The user-defined value from patchPluginXml.sinceBuild 
  // (or its default value) will be used as a "since" value,
  // and if this is set to true the same value will be set for the "until" value.
  // This is the default value, defined for documentation purposes
  sameSinceUntilBuild = 'false'

  // Instrument Java classes with nullability assertions.
  // This is the default value, defined for documentation purposes
  instrumentCode = 'true'

  // Download IntelliJ sources while initializing Gradle build
  // This is the default value, defined for documentation purposes
  downloadSources = 'true'

  // Define the sandbox directory path/name
  // This is the default value, defined for documentation purposes
  sandboxDirectory = file("${project.buildDir}/idea-sandbox")

  // Set this path if you want to test your plugin in any non-IDEA JetBrains IDE 
  // The default empty path means use the same IDE for compiling and running/debugging
  alternativeIdePath = ''

  // The absolute path to the local directory that should be used for storing IDEA distributions.
  // The default empty path means the Gradle cache directory will be used.
  ideaDependencyCachePath = ''

}

// Set runIde attributes
runIde {

  // Version of the JetBrains Java runtime version to use when running.
  // Specify if you want to run against a jre different than the version
  // built-in the application. Unspecified means using the built-in version.
  // E.g.
  // runIde.jbreVersion = 'jbrex8u152b1343.15'

  // Path to a local IDEA build to be used to run plugin. Allows testing
  // this plugin against a different version of IntelliJ. Leave out
  // to run against the build specified by intellij.version or intellij.localPath
  // runIde.ideaDirectory = '/Users/<user_name>/Documents/source/idea'

  // Path to the sandbox config directory  
  // This is the default value, defined for documentation purposes
  configDirectory = file("${intellij.sandboxDirectory}/config")

  // Path to the sandbox plugins directory  
  // This is the default value, defined for documentation purposes
  pluginsDirectory = file("${intellij.sandboxDirectory}/plugins")

  // Path to the sandbox system directory  
  // This is the default value, defined for documentation purposes
  systemDirectory = file("${intellij.sandboxDirectory}/system")

}


// Patch the plugin.xml file with the following values
patchPluginXml {

  version = '0.1.0'               // <version> tag value

  sinceBuild = '145.0'            // <idea-version> tag since-build attribute
  
  untilBuild = ''                 // <idea-version> tag until-build attribute - Not Inclusive!

  // Replaces <description> tag contents.
  // No <![CDATA[ ]]> required when embedding HTML tags.
  pluginDescription = 'Demonstrates using the Gradle workflow to develop plugins for JetBrains IDEs<br>Adds <em>Greeting</em> to the main menu.<br>Pops a simple <b>Hello</b> dialog'

  // Replaces <change-notes> tag value
  // No <![CDATA[ ]]> required when embedding HTML tags.
  changeNotes = '<b>0.1.0</b> Document build.gradle file<br><b>0.0.1</b> Initial release.'

  // The list of plugin.xml files to patch (in this case just 1)
  // Note that full path is required for each plugin.xml file
  // This is the default value, defined for documentation purposes
  pluginXmlFiles = ["${sourceSets.main.resources.asPath}"]

  // the directory to store patched xml files
  // This is the default value, defined for documentation purposes
  destinationDir = file("${project.buildDir}/patchedPluginXmlFiles")
}


// Define javadoc paths for this plugin
javadoc {
  // Set of source files to include
  source = sourceSets.main.java.srcDirs
  // Include all class files, e.g. from libraries
  classpath = sourceSets.main.compileClasspath
  // Non-default output path
  destinationDir = file("${project.projectDir}/docs/javadoc")
}

// Force rebuild of Javadocs each time the plugin jar is built
jar.dependsOn javadoc

